import pandas as pd
from datetime import datetime, timedelta

def calculate_last_three_months_average(csv_file_path, date_column, value_column, oneview_filter=None):
    # Read the CSV file into a DataFrame
    df = pd.read_csv(csv_file_path)
    
    # Convert the date column to datetime
    df[date_column] = pd.to_datetime(df[date_column])
    
    # Get the most recent date in the dataset (when the data is uploaded)
    upload_date = df[date_column].max()
    
    # Calculate the date three months before the date it was uploaded
    three_months_ago = upload_date - timedelta(days=90)
    
    # Filter the DataFrame to include only the last three months
    last_three_months_df = df[(df[date_column] >= three_months_ago) & (df[date_column] <= upload_date)]
    
    # Apply oneview filter if given
    if oneview_filter is not None and 'oneview' in df.columns:
        last_three_months_df = last_three_months_df[last_three_months_df['oneview'] == oneview_filter]
    
    # Calculate the average of the value column for the last three months
    average_value = last_three_months_df[value_column].mean()
    
    return average_value, three_months_ago, upload_date

# define my variables
csv_file_path = 'C:\\esg\\esgRebuild\\electricity.csv'
date_column = 'period'
value_column = 'consumption'
oneview_value = '77399X'

#call my function
average, start_date, end_date = calculate_last_three_months_average(
    csv_file_path, 
    date_column, 
    value_column,
    oneview_filter=oneview_value
)

print(f'Average value from {start_date.strftime("%Y-%m-%d")} to {end_date.strftime("%Y-%m-%d")}: {average}')


import pandas as pd
from datetime import datetime

# define function 
def get_last_year_value(csv_file_path, date_column, value_column, oneview=None):
    # Read the CSV file into a DataFrame
    df = pd.read_csv(csv_file_path)
 
    # Convert the date column to datetime
    df[date_column] = pd.to_datetime(df[date_column])
 
    # Get the most recent date in the dataset (when the data is uploaded)
    upload_date = df[date_column].max()
 
    # Filter by building number if provided
    if oneview is not None:
        df = df[df['oneview'] == oneview]
        
        # Check if any data exists for this building
        if df.empty:
            return "No data found for building number " + str(oneview)
    
    # Find the latest month and year
    latest_month = upload_date.month
    latest_year = upload_date.year
    
    # Calculate the same month in the previous year
    previous_year = latest_year - 1
    
    # Filter to get the data for the same month in the previous year
    last_year_data = df[(df[date_column].dt.year == previous_year) & 
                        (df[date_column].dt.month == latest_month)]
    
    #Get the value for this month in the previous year
    if last_year_data.empty:
        return "No data found for " + str(latest_month) + "/" + str(previous_year)
    else:
        last_year_value = last_year_data[value_column].sum()
    return last_year_value
 
# call my func
csv_file_path = 'C:\\ESG\\esgRebuild\\electricity.csv'
date_column = 'period' 
value_column = 'consumption'
oneview_number = '77399X'  

last_year_value = get_last_year_value(csv_file_path, date_column, value_column, oneview_number)
print(f'Value for the last year: {last_year_value}')
