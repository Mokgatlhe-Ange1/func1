import pandas as pd
from datetime import datetime, timedelta

def fill_data_gap(csv_file_path, date_column, value_column, oneview, gap_month):
    # Read the CSV file into a DataFrame
    df = pd.read_csv(csv_file_path)
    
    # Convert the date column to datetime - using Year-Month format
    df[date_column] = pd.to_datetime(df[date_column], format='%Y-%m')
    
    # Filter by oneview
    df_filtered = df[df['oneview'] == oneview]
    
    # Check if any data exists for this oneview
    if df_filtered.empty:
        return None, "Gap", f"No data found for oneview {oneview}"
    
    # Convert gap_month to datetime if it's a string
    if isinstance(gap_month, str):
        gap_month = pd.to_datetime(gap_month, format='%Y-%m')
    
    # BUSINESS RULE - STEP 1: Check for three preceding consecutive months
    # Calculate the date three months before the gap
    three_months_before_gap = gap_month - pd.DateOffset(months=3)
    
    # Get data for the 3 months before the gap
    previous_three_months = df_filtered[
        (df_filtered[date_column] >= three_months_before_gap) & 
        (df_filtered[date_column] < gap_month)
    ]
    
    # Group by month to check for consecutive months
    monthly_data = previous_three_months.groupby(
        previous_three_months[date_column].dt.to_period('M')
    ).agg({
        value_column: 'sum',
        date_column: 'count'
    })
    
    # Check if we have actual data for each of the three preceding consecutive months
    if len(monthly_data) == 3:
        # Calculate the average of the three months
        average_value = monthly_data[value_column].mean()
        months_covered = [period.strftime('%Y-%m') for period in monthly_data.index.to_timestamp()]
        return average_value, "Step 1: Three-month average", f"Average of preceding three consecutive months ({', '.join(months_covered)})"
    
    # BUSINESS RULE - STEP 2: If three consecutive months data not available,
    # check previous year's same month
    previous_year = gap_month.year - 1
    same_month_previous_year = df_filtered[
        (df_filtered[date_column].dt.year == previous_year) & 
        (df_filtered[date_column].dt.month == gap_month.month)
    ]
    
    if not same_month_previous_year.empty:
        previous_year_value = same_month_previous_year[value_column].sum()
        previous_period = f"{previous_year}-{gap_month.month:02d}"
        return previous_year_value, "Step 2: Previous year's value", f"Same month in previous year ({previous_period})"
    
    # If neither rule can be applied, show the gap
    gap_str = gap_month.strftime('%Y-%m')
    return None, "Gap", f"Step 1 failed: Missing three consecutive months. Step 2 failed: No data for {gap_str} in previous year."


def calculate_three_months_average(csv_file_path, date_column, value_column, reference_month, oneview_filter=None):
    """
    Calculate the average for the 3 months ending with the reference month
    """
    # Read the CSV file into a DataFrame
    df = pd.read_csv(csv_file_path)
    
    # Convert the date column to datetime - using Year-Month format
    df[date_column] = pd.to_datetime(df[date_column], format='%Y-%m')
    
    # Filter by oneview if provided
    if oneview_filter is not None and 'oneview' in df.columns:
        df = df[df['oneview'] == oneview_filter]
        
        # Check if any data exists for this oneview
        if df.empty:
            return None, "Gap", f"No data found for oneview {oneview_filter}"
    
    # Convert reference_month to datetime if it's a string
    if isinstance(reference_month, str):
        reference_month = pd.to_datetime(reference_month, format='%Y-%m')
    
    print(f"Reference month for calculation: {reference_month.strftime('%Y-%m')}")
    
    # Calculate the date 3 months before the reference month (inclusive)
    start_date = reference_month - pd.DateOffset(months=2)
    end_date = reference_month
    
    print(f"Calculating average for period: {start_date.strftime('%Y-%m')} to {end_date.strftime('%Y-%m')}")
    
    # Filter the DataFrame to include only the 3 months including and before reference_month
    three_month_period_df = df[
        (df[date_column] >= start_date) & 
        (df[date_column] <= end_date)
    ]
    
    # Group by month to check if we have data for these months
    monthly_data = three_month_period_df.groupby(
        three_month_period_df[date_column].dt.to_period('M')
    ).agg({
        value_column: 'sum'
    })
    
    print(f"Found data for these months: {', '.join([period.strftime('%Y-%m') for period in monthly_data.index.to_timestamp()])}")
    
    # Check if we have data for these three months
    if monthly_data.empty:
        return None, "Gap", f"No data available between {start_date.strftime('%Y-%m')} and {end_date.strftime('%Y-%m')}"
    
    # Check if we have all three months of data
    if len(monthly_data) < 3:
        missing_months = []
        for i in range(3):
            check_month = start_date + pd.DateOffset(months=i)
            check_period = pd.Period(check_month, freq='M')
            if check_period not in monthly_data.index:
                missing_months.append(check_month.strftime('%Y-%m'))
        
        return None, "Gap", f"Missing data for months: {', '.join(missing_months)}"
    
    # Calculate the average of the value column for these three months
    average_value = monthly_data[value_column].mean()
    
    # Check if the average exists (not NaN)
    if pd.isna(average_value):
        return None, "Gap", f"Unable to calculate average for period {start_date.strftime('%Y-%m')} to {end_date.strftime('%Y-%m')}"
    
    months_covered = [period.strftime('%Y-%m') for period in monthly_data.index.to_timestamp()]
    print(f"Months included in average: {', '.join(months_covered)}")
    print(f"Monthly values: {', '.join([f'{m}: {v:.2f}' for m, v in zip(months_covered, monthly_data[value_column])])}")
    print(f"Calculated average: {average_value:.2f}")
    
    return average_value, start_date, end_date


def get_previous_year_same_month_value(csv_file_path, date_column, value_column, reference_month, oneview=None):
    """
    Get the value from the same month in the previous year
    """
    # Read the CSV file into a DataFrame
    df = pd.read_csv(csv_file_path)
 
    # Convert the date column to datetime - using Year-Month format
    df[date_column] = pd.to_datetime(df[date_column], format='%Y-%m')
    
    # Check if the DataFrame is empty
    if df.empty:
        return "No data available in the dataset"
 
    # Filter by oneview if provided
    if oneview is not None:
        df = df[df['oneview'] == oneview]
        
        # Check if any data exists for this oneview
        if df.empty:
            return f"No data found for oneview {oneview}"
    
    # Convert reference_month to datetime if it's a string
    if isinstance(reference_month, str):
        reference_month = pd.to_datetime(reference_month, format='%Y-%m')
    
    # Calculate the same month in the previous year
    previous_year = reference_month.year - 1
    
    # Filter to get the data for the same month in the previous year
    last_year_data = df[
        (df[date_column].dt.year == previous_year) & 
        (df[date_column].dt.month == reference_month.month)
    ]
    
    # Get the value for this month in the previous year
    if last_year_data.empty:
        return f"No data found for {reference_month.month}/{previous_year}"
    
    last_year_value = last_year_data[value_column].sum()
    
    # Check if the value exists (not NaN)
    if pd.isna(last_year_value):
        return f"Unable to calculate value for {reference_month.month}/{previous_year}"
        
    return last_year_value, f"{previous_year}-{reference_month.month:02d}"


def main():
    csv_file_path = 'C:\\ESG\\esgRebuild\\electricity.csv'
    date_column = 'period'
    value_column = 'consumption'
    oneview_number = '77399X'
    
    print("Starting analysis...")
    
    # Get the current date and use the previous month as reference
    current_date = datetime.now()
    reference_month = current_date.replace(day=1) - timedelta(days=1)
    reference_month_str = reference_month.strftime('%Y-%m')
    
    print(f"Current date: {current_date.strftime('%Y-%m-%d')}")
    print(f"Reference month: {reference_month_str}")
    
    # Example 1: Calculate average for 3 months ending with reference month
    result = calculate_three_months_average(
        csv_file_path, 
        date_column, 
        value_column,
        reference_month,
        oneview_filter=oneview_number
    )
    
    # Check if we got a valid average or a gap message
    if isinstance(result, tuple) and len(result) == 3 and not isinstance(result[0], type(None)):
        # We have a valid 3-month average
        average, start_date, end_date = result
        print(f'Average value from {start_date.strftime("%Y-%m")} to {end_date.strftime("%Y-%m")}: {average}')
    else:
        print("Could not calculate 3-month average. Attempting to get previous year's value...")
        
        # No 3-month average available, try to get last year's value for the reference month
        last_year_result = get_previous_year_same_month_value(
            csv_file_path, 
            date_column, 
            value_column,
            reference_month,
            oneview_number
        )
        
        if isinstance(last_year_result, str):
            print(last_year_result)  # Print error message if no last year value
            print("No data available for either 3-month average or previous year. Gap identified.")
        else:
            value, period = last_year_result
            print(f'Using value for the same month in previous year ({period}): {value}')


if __name__ == "__main__":
    main()
